Spring boot

Spring:
At its core, Spring framework is really just a dependency injection container, with a couple of convenience layers (think: database access, proxies, aspect-oriented programming, RPC, a web mvc framework) added on top.
It helps you build Java application faster and more conveniently.

Spring MVC:
On a very high-level it allows you to turn your Spring application into a web application with the help of a DispatcherServlet that routes to @Controller classes.
These can be RestControllers (where you send XML or JSON to the client) or good old HTML Controllers where you generate HTML with frameworks like Thymeleaf, Velocity or Freemarker.

Spring Boot:
Spring offers you the ability to read in .properties files from a variety of places, e.g. with the help of @PropertySource annotations. It also offers you the ability to write JSON REST controllers with the help of its Web MVC framework.
The issue is, you have to write and configure all these individual pieces yourself.
Spring Boot, on the other hand, takes these single pieces and bundles them up together.
Example:
Always and automatically look for application.properties files in various places and read them in.
Always booting up an embedded Tomcat so you can immediately see the results of writing your @RestControllers.
Automatically configuring everything for you to send/receive JSON, without needing to worry a ton about specific Maven/Gradle dependencies.
All, by running a main method in a Java class, which is annotated with the @SpringBootApplication annotation.
Even better, Spring Boot offers Maven/Gradle plugins that let you package up your application into a .jar file,
which you can run like this: java -jar mySpringBootApp.jar

So, Spring Boot is all about taking the existing Spring framework parts, pre-configuring and packaging them up - with as little development work needed as possible.

Learn about dependecy injection and Application context here , this article is really good.
https://www.marcobehler.com/guides/spring-framework

Inversion Of Control : It is a design principle through which we can create and maintain the objects in a container away
from the original code implementaion.Which means we are taking control of flow of program(creating and maintaining beans)
from the original code and doing it with a spring container. IOC can be achieved through Dependency Injection, Factory design
pattern and Service locator design pattern.

Dependency Injection: It is a design pattern with which we achieve IOC.
Dependency injection generally means passing a dependent object as a parameter to a method, rather than having the method create the dependent object.
What it means in practice is that the method does not have a direct dependency on a particular implementation; any implementation that meets the requirements can be passed as a parameter.
With this implementation of objects defines their dependencies. And spring makes it available.This leads to loosely coupled application development.
Quick Example:EMPLOYEE OBJECT WHEN CREATED,IT WILL AUTOMATICALLY CREATE ADDRESS OBJECT (if address is defines as dependency by Employee object)*.

*Spring Boot is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring framework.

*Spring Boot is a project that is built on the top of the Spring Framework.
 It provides an easier and faster way to set up, configure, and run both simple and web-based applications.

Spring boot ia s combination of Spring and embedded servers(tomcat by default) and spring boot removes the
need of XML configuration for beans and thus reducing lot of boiler plate code.

Spring boot has lot advantages:

The main goal of Spring Boot is to reduce development, unit test, and integration test time.

Provides Opinionated Development approach
Avoids defining more Annotation Configuration
Avoids writing lots of import statements
Avoids XML Configuration.

By providing or avoiding the above points, Spring Boot Framework reduces Development time, Developer Effort, and increases productivity.

Disadvantages of spring boot

Spring Boot can use dependencies that are not going to be used in the application.
These dependencies increase the size of the application.

Spring boot Auto-Configuration

This is the magical feature which makes spring boot apart from spring. This feature @EnableAutoConfiguration which is part of @SpringBootApplication
confiures all the required configuration to run your spring boot application. With out this feature i.e usually in spring applications you have to define
configurations for everything. Even for dispatcher servlet also. This can be avoided with spring boot auto configuration

What it does exactly ?
If you observe if you add Spring data jpa dependency and my sql dependency and required DB props in app.props then automatically connection is established
If u change the DB and the configuration then the connection is automatically shifted to another DB which you have shifted.
so for example if you have added MySql dependency and required configs then

 Spring boot auto configuration automatically checks for the DataSource.class (from Spring-Data-Jpa dependency)
                                       |
                                       |  (true)
                                       v
 Spring boot auto configuration automatically checks for the MySqlConnector.class (from my-sql dependency)
                                       |
                                       |  (true)
                                       v
  Spring boot auto configuration automatically checks for required configs props in application.props
                                        |
                                        |  (true)
                                        v
   Spring boot auto configuration automatically connects app to DB

   All this work is automatically done by spring boot autoconfiguration so that you don't need to do all this configuration
   All this set of things to check are kept in spring-boot-starter-auto-configuraton jar and under that Meta-Inf folder and in that Spring factories
   All this checking is achieved by using @Conditional group annotations which checks for the class or props or anything we specify

You should definately visit these articles
   please go through this article first : https://www.scaler.com/topics/spring-boot/spring-boot-auto-configuration/

   and then go through this article : https://www.marcobehler.com/guides/spring-boot-autoconfiguration
